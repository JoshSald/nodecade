import chalk from "chalk";

export function startBattleMode(rl) {
  const characters = [
    {
      name: "Granite Fist (Rock)",
      art: `⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀  ⠀⠀⠀⠀⠀⠀⢀⣠⣴⣾⣿⣿⠿⠛⠋⠉⠉⠉⠛⠛⠿⢿⣿⣿⣷⣶⣦⣤⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀  ⠀⠀⠀⢀⣠⣴⣾⣿⣿⢿⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠍⠛⠻⠿⢿⣿⣿⣶⣤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⣴⣿⣿⣿⣿⣿⠉⠀⠀⠀⠀⠰⣦⣄⠀⠀⠀⠀⠀⠀⠀⠀⢦⣤⣀⣀⣀⠀⠀⠉⠻⣿⣿⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⢀⣀⠀⠀⠀⠀⠀ ⢀⣾⣿⣿⣿⣿⣿⣿⣄⠀⠀⠀⠀⠀⠈⠙⠿⣦⣄⠀⠀⠀⠀⠀⠀⠈⠛⠛⠛⠀⠀⠀⠀⠙⢿⣿⣦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⢀⣾⣿⣿⣿⣷⣦⡀⠀⣸⣿⣿⣿⣿⣿⣿⡟⠛⠻⣿⣦⡀⠀⠀⠀⠀⠀⠈⠉⠀⠀⠀⠀⠀⣀⣀⣀⣀⣀⣠⣤⣤⣤⣤⣬⣿⣿⣷⣾⣷⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⣾⣿⣿⣿⣿⣿⣿⣿⣾⣿⣿⣿⣿⣿⣿⡿⠁⠀⠀⠀⠙⣿⣄⣀⣤⣤⣤⣶⣶⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⢰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⢀⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠿⠿⠟⠛⠉⡀⠀⠀⢹⣿⣿⡆⠀⠀⠀⠀⠀⠀⠀⠀
⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠿⠿⠿⠿⠿⠛⠛⠛⠋⠉⠉⠉⠁⠀⠀⠀⠀⢀⣤⣾⡿⠀⠀⠈⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀⠀
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠁⠀⠀⠀⠀⠀⠀⠿⣿⣿⣶⣤⣀⠀⠀⠀⠀⠀⢠⣄⠀⠀⣶⡀⠀⠀⢀⣴⣿⣿⣏⠀⠀⠀⠀⢹⣿⣿⡆⠀⠀⠀⠀⠀⠀⠀
⠈⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⢀⣴⣿⠟⢿⣿⣿⣶⣤⣀⠀⣾⣿⠂⢰⣿⣇⣠⣴⣿⣿⡋⠉⢻⣷⡀⠀⠀⠈⣿⣿⣷⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⣿⣿⠁⢠⣿⣿⣿⣿⢿⣿⣿⣿⠟⠀⠈⠻⣿⣿⡿⣿⣿⣿⡄⠀⣿⣇⠀⠀⠀⢻⣿⣿⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠈⠙⠛⢉⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⢰⣿⡇⠀⣸⣿⣿⣿⣿⣀⣿⡟⠁⠀⠀⠀⠀⠀⣿⣧⣾⣿⣿⣇⡀⢸⣿⠀⠀⠀⢸⣿⣿⡆⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⢠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠀⠀⠀⠀⠀⠀⢸⣿⡇⠀⢸⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⡇⠀⣼⡿⠀⠀⠀⠸⣿⣿⡇⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⣰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠁⠀⠀⠀⠀⠀⠀⠀⢿⣿⡀⠘⣿⣿⣿⣿⣿⣿⠁⠀⠀⠀⠀⠀⠀⠹⣿⣿⣿⡿⠁⣴⡿⠁⠀⠀⠀⠀⣿⣿⣷⡀⠀⠀⠀⠀⠀
⠀⠀⠀⢠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠃⠀⠀⢀⣤⡀⠀⠀⠀⠀⠈⠻⣷⣄⡈⠻⣿⡿⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⠿⠵⠟⠉⠀⠀⠀⠀⠀⣼⡟⣿⣿⣷⡀⠀⠀⠀⠀
⠀⠀⠀⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠁⠀⠀⠀⠘⢿⣷⠀⠀⠀⠀⠀⠀⠀⠉⠉⠉⠉⠀⠀⠀⠀⣀⣤⣤⣶⣤⣤⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⠁⠘⣿⣿⣷⠀⠀⠀⠀
⠀⠀⢀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣿⡿⠛⠉⠉⠉⠻⣿⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⡾⠃⠀⠀⢹⣿⣿⡄⠀⠀⠀
⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⠀⠀⠀⢀⣠⣤⣤⣤⣤⣤⣄⡀⠀⠀⠀⠀⠀⠀⡾⠟⠁⠀⠀⠀⠀⠀⠀⠈⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣴⣶⣾⣿⣿⣷⣦⡀⠀
⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⢀⣾⣿⡿⠛⠋⠉⠛⠻⢿⣿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣴⣾⣿⡛⠉⠉⠉⠙⢿⣿⣿⡄
⠀⠀⠘⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠀⠀⠀⣤⣤⣤⣄⣹⣿⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣼⣿⡟⠋⠻⣷⣶⣶⠷⠀⠀⢻⣿⣿
⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠁⠀⠀⠀⠀⠀⠉⠉⠛⢿⣿⣿⣿⣦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣶⠂⠀⠀⣾⣿⣿⣷⡆⢰⣿⡇⠀⠀⠀⠀⠀⣿⣿
⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⣀⣀⠀⠈⣿⡇⢹⣿⡆⠀⠀⠀⠀⠀⣀⠀⠀⠀⠀⠀⠀⣾⠟⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣶⣦⡤⠀⠀⠀⣿⣿
⠀⠀⠀⠘⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⠀⠀⠀⠀⠀⠀⠉⠻⣿⣾⣿⣧⣾⣿⠀⠀⠀⠀⢠⣿⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣿⣿⡀⠀⠀⠀⣠⣾⣿⡿
⠀⠀⠀⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⡀⠀⠀⠀⠀⢀⣠⣾⣿⣿⣿⣿⠃⠀⠀⠀⠀⠘⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⣿⣶⣾⣿⣿⣿⣿⡇
⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣲⣶⣿⣽⣯⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣾⣿⣿⠟⠀
⠀⠀⠀⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣤⣀⠀⠀⠀⠀⠀⠀⣀⣤⣴⣶⣶⣶⣦⣤⣤⣤⣾⣿⡿⢿⣿⣿⣿⡿⣿⣿⣿⡿⠿⠛⠁⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠈⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣿⣿⣿⣟⣿⣿⣿⣿⣿⣿⣿⣶⣤⣠⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⣿⣿⣿⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠛⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣿⣿⣿⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣟⣿⣟⣟⣾⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣿⣷⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⣄⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣴⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠛⠛⠛⠛⠿⠿⠿⠿⠿⠿⠟⠛⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣿⠟⠋⠉⠀⠀⠙⠻⢿⣿⣿⣿⣿⣿⡤⠤⠤⠤⠤⠤⢤⠤⣤⣤⣤⣤⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⣀⡴⠶⠛⠻⣿⣿⣥⣀⣀⣀⣀⣀⣀⣠⣤⣶⣿⣿⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠏⠙⠓⠶⣄⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠙⠦⣤⣀⣀⡈⠛⠿⣿⢿⣿⣿⡿⠿⠿⠿⠟⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠙⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⣁⣀⣠⡤⠴⠛⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠉⠉⠉⠓⠓⠒⠒⠒⠲⠶⠶⠤⠴⠶⠤⠤⠤⠄⠠⠤⠤⠤⠄⠀⠀⠠⠤⠤⠤⠤⠴⠶⠶⠶⠶⠒⠒⠒⠒⠛⠋⠉⠉⠉⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀`,
    },
    {
      name: "Shira Leaf (Paper)",
      art: `⠀⠀⠀⠀⠀⠀⠀⠀⠀⢾⣿⣿⣿⣿⣿⣿⣶⣶⣶⣶⣤⣤⣤⣤⣄⣀⣀⣀⣀⣀⣀⣀⠀⢀⡀⢀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣤⣤⣤⣤⣤⣤⣶⣶⣶⣦⡄⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣿⣿⣏⠉⠙⠛⠛⠛⠛⠿⠿⠿⠿⠿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠿⠿⠿⠿⠿⠟⠛⠛⢿⣿⣿⡀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣿⣿⣇⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣿⣿⣇⠀⠀⠀⠀⠀⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⡀⠀⠀⠀⠀⠘⢿⣦⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⡄⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣇⠀⠀⠀⠀⠀⠀⠙⢮⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⡇⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢼⣿⣿⣿⣿⣄⣀⣀⣀⠀⠀⠀⠀⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⣴⣾⠇⠀⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣿⣿⣿⣽⡟⡛⢿⢿⡿⠿⢿⣿⣿⣶⣶⣶⣶⣶⣶⣶⣤⣤⣤⣤⣤⣤⣤⣤⣤⣤⣤⣤⣤⣤⣤⣤⣤⣭⣭⣥⣤⣤⣤⣦⣾⣿⣿⣇⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⢀⣀⣤⣴⣶⣿⣿⣿⣿⣇⡐⡅⠠⣄⠠⠁⠀⡄⡀⠀⠀⡉⠭⠉⠭⠉⠩⠉⠛⠛⠛⠛⠛⠛⠛⣛⠛⠛⢛⠻⢛⠛⢟⢛⠉⣉⠉⢍⣛⠉⢻⣿⣿⡆⠀⠀⠀⠀
⠀⠀⠀⢀⣤⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⡛⠻⠛⠋⢣⠄⠀⠒⠊⠄⠁⠀⠈⠖⠀⠉⠁⢁⢁⠐⠈⡱⡱⠍⠀⠉⠅⠀⠀⠁⠀⠂⠄⠁⠜⠀⠄⠈⠠⠀⠁⣸⣿⣿⠃⠀⠀⠀⠀
⠀⢀⣴⣿⣿⢟⡯⢓⣾⣿⣿⣿⣿⣿⣿⣷⣤⣎⣈⠄⠀⠐⡶⠄⠈⠈⠀⠸⠀⠈⠀⠀⢀⠸⡀⠤⠀⠄⠌⠀⠀⡀⠑⠈⠒⠠⡊⠀⢂⢀⠀⠄⢀⠠⣴⠿⣿⣿⣯⠀⠀⠀⠀⠀
⣴⣿⣿⢟⣫⠂⢱⣾⣿⣿⣿⣿⣿⣿⡯⣝⣛⡛⠿⠿⠿⣿⣷⣶⣶⣦⣤⣤⣤⣤⣄⣀⣀⣀⣀⣀⣀⠀⣀⠀⠀⠀⠀⠠⠀⠠⠀⠁⠠⡀⠀⣀⣅⣀⣘⣤⣿⣿⣿⠀⠀⠀⠀⠀
⣿⣿⣷⣬⣐⣢⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠈⠉⠉⠛⠒⠲⠶⠤⠭⢭⣭⣉⣛⣛⣛⣛⠛⠻⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⢟⣛⣿⣿⡟⠁⠀⠀⠀⠀⠀
⠈⠛⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠰⣿⣶⣤⣀⠀⠀⠀⠉⠉⠉⠉⠉⠉⠉⠉⠁⠀⠚⠛⠛⠃⠀⠀⠀⠀⣛⣭⣍⠉⠉⠉⠉⣿⣿⡇⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⢉⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠈⢉⣿⣿⣿⣷⣦⣄⡀⠀⠀⠀⣄⠀⠀⠀⢀⣤⠀⠀⢀⣠⣴⣶⣿⡿⠟⠋⠀⠀⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⣴⣿⠟⢉⣿⣿⣿⣿⣿⣷⣦⣼⣿⠀⠀⠀⢺⣿⣶⣿⣿⣿⡿⠛⢿⣷⡀⠀⠀⠀⠀⠀⣿⣿⠇⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⢰⣿⠃⠀⣼⣿⣿⣿⣇⣸⣿⠙⠛⠁⠀⠀⠀⠀⢉⣿⡟⣿⣿⣿⡄⠈⣿⣧⠀⠀⠀⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠉⠛⠛⠛⠛⠉⠉⢻⣿⡇⠀⠀⠀⠀⠀⠀⠀⢸⣿⠀⠀⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⢸⣿⣷⣿⣿⣿⡇⠀⢸⣿⠀⠀⠀⠀⢀⣿⣿⠃⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⣿⡇⠀⠀⠀⠀⠀⠀⠀⠘⣿⡆⠀⢻⣿⣿⣿⣿⣿⡿⠀⠀⠀⠀⠀⠀⠀⠈⣿⣿⣿⣿⣿⡇⠀⣾⡟⠀⠀⠀⠀⢸⣿⣿⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣴⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠘⠿⣤⠈⢿⣿⣿⣿⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠻⣿⣿⣿⠟⢀⣼⡿⠁⠀⠀⠀⠀⢸⣿⣿⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⢀⣴⣾⣿⣿⡟⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠁⠀⠛⠉⠀⠀⠀⠀⠀⠀⢸⣿⣿⣷⣄⡀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⢀⣴⣿⣿⠟⠉⠈⣧⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣾⣿⣿⣶⣶⣦⣤⣤⣤⣶⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⣿⠙⣿⣿⣿⣦⡀⠀⠀
 ⠀⠀⠀⠀⣾⣿⡿⠁⠀⠀⣠⣿⣿⡇⠀⠀⠀⠀⢸⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⡅⢆⠈⠉⠙⢿⣿⣿⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⢠⡇⠈⠻⣿⣿⣦⡀
   ⠀⠘⣿⣿⡇⠀⠀⠸⣿⣿⣿⣇⣀⣀⡀⠀⠀⢻⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣶⣔⣂⣚⣴⣿⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣾⡀⠀⠀⠈⢿⣿⣷
   ⠀⠀⣿⣿⣧⠀⠀⠀⢹⣿⣿⡿⠿⢿⣿⣷⡀⠀⢻⣧⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠉⠉⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⡟⢿⣿⣆⠀⠀⠀⣿⣿
   ⠀⠀⠘⢿⣿⣷⣀⠀⠙⠉⠀⠀⠀⠐⢾⣿⣷⡀⠀⠻⡿⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡴⠀⠀⠀⠀⢸⣿⣷⣾⣿⠃⠀⠀⢀⣿⣿
   ⠀⠀⠀⠈⢻⣿⣿⠁⠀⠀⠀⠀⠀⠀⠀⠙⣿⣷⡀⠀⠙⣿⢧⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣿⠃⠀⠀⠀⠀⢸⣿⡟⠋⠁⠀⠀⣠⣾⣿⡟
   ⠀⠀⠀⠀⢸⣿⣿⣦⠀⠀⠀⠀⠀⠀⠀⡀⢸⣿⡇⠀⠀⠈⠳⣿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣿⠃⠀⠀⠀⠀⠀⢸⣿⡇⠀⠀⠰⣿⣿⡿⠋⠀
   ⠀⠀⠀⠀⠈⢿⣿⣯⡳⣄⣀⠀⠀⢀⣠⣿⣿⡿⠁⠀⠀⠀⠀⠀⠙⠿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣾⠟⠁⠀⠀⠀⠀⠀⠀⠈⣿⡇⠀⠀⠀⣿⣿⡇⠀⠀
  ⠀⠀⠀⠀⠀⠀⠈⠻⣿⣿⣦⣭⣉⣩⣽⣿⡿⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣷⠀⢀⣴⣿⣿⡃⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣿⣿⡿⠿⠿⠛⠋⣼⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⣿⣉⢉⣹⣿⣿⠇⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⡇⣀⡤⠶⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⣿⣿⣿⡿⠋⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣷⣷⣶⣶⣶⣶⣶⣶⣶⣶⣶⣶⣶⣶⣶⣶⣦⣤⣤⣤⣤⣤⣤⣀⣀⣀⣀⣀⣀⣀⣤⣤⣤⣤⣴⣶⣶⣶⣿⣿⣿⣿⣿⡿⠋⠁⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⠛⠛⠛⠛⠛⠛⠛⣿⣿⣿⠍⠉⠉⣿⣿⣿⠿⠿⠿⠿⠿⠿⢿⣿⠿⣿⣿⣿⣿⣿⣿⣿⡛⠛⠛⢿⣿⣿⡛⠉⠉⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣤⣴⣿⣿⡗⠒⠲⠾⣿⣿⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⡷⠚⠉⠉⣿⣿⣧⣤⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣾⣿⣿⠿⠟⠛⠛⠀⠀⠀⣿⣿⣇⢀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣠⣿⣿⠇⠀⠀⠚⠛⠛⠿⢿⣿⣿⣦⡄⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣤⡴⢾⣿⣿⠋⠁⠀⠀⠀⠀⠀⠀⣠⣿⣿⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⣿⣿⣄⡀⠀⠀⠀⠀⠀⠀⠈⢻⣿⣿⠦⣤⣄⡀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠰⣏⡁⠀⠀⠘⠿⣿⣿⣶⣶⣶⣶⣾⣿⣿⡿⠟⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠻⠿⣿⣿⣿⣷⣶⣶⣾⣿⣿⡿⠟⠀⠀⠀⣙⡇⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠙⠓⢒⣶⢶⣭⣯⢽⡭⠭⣥⣠⣤⣄⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⡀⣀⣀⣀⣀⣀⣠⣠⣤⣬⣨⡥⠭⣭⠭⠥⠴⠶⢶⣶⡛⠋⠉⠀⠀⠀`,
    },
    {
      name: "Bladeclaw (Scissors)",
      art: `⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣴⣾⣿⣿⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣤⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣿⢿⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⣿⣿⣆⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⡿⠁⡼⢿⣿⣿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⣿⡿⡏⢻⣿⣿⣇⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⠃⡼⠃⠈⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⣿⡿⠁⠹⡄⢻⣿⣿⡄⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⡇⢸⠃⠀⠀⠸⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⡟⠀⠀⠀⢳⡈⣿⣿⣿⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⣿⠁⡟⠀⠀⠀⠀⢿⣿⣿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣼⣿⣿⡏⠀⠀⠀⠀⠈⡇⢹⣿⣿⡇⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⠀⡇⠀⠀⠀⠀⢾⣿⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣿⡟⠀⠀⠀⠀⠀⠀⡇⢸⣿⣿⡇⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⠀⡇⠀⠀⠀⠀⠘⣿⣿⣿⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⠂⠀⠀⠀⠀⠀⠀⡇⢸⣿⣿⠇⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⡀⣧⠀⠀⠀⠀⠀⢹⣿⣿⣿⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣾⣿⣿⣿⠃⠀⠀⠀⠀⠀⠀⢸⠃⣼⣿⣿⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣿⣿⡇⢸⠀⠀⠀⠀⠀⠀⢷⣿⣿⣿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⡿⣹⠃⠀⠀⠀⠀⠀⠀⢠⡏⢠⣿⣿⡟⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣷⠘⡇⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⡿⣵⠃⠀⠀⠀⠀⠀⠀⢀⡟⢀⣾⣿⣿⠁⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⡆⢻⡄⠀⠀⠀⠀⠀⠹⡾⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⣿⡿⣽⠃⠀⠀⠀⠀⠀⠀⢀⡞⠀⣼⣿⣿⠇⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⣿⣿⠈⣧⠀⠀⠀⠀⠀⠀⢳⢻⣿⣿⣇⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⣿⡟⣽⠃⠀⠀⠀⠀⠀⠀⢀⡾⠁⣼⣿⣿⠏⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣧⠸⣆⠀⠀⠀⠀⠀⠈⣧⢿⣿⣿⡄⠀⠀⠀⠀⠀⠀⣰⣿⣿⡟⣼⠁⠀⠀⠀⠀⠀⠀⠀⡼⠁⣼⣿⣿⡏⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⡆⢹⡄⠀⠀⠀⠀⠀⠸⡞⣿⣿⣿⡀⠀⠀⠀⠀⣰⣿⣿⡟⣼⠃⠀⠀⠀⠀⠀⠀⠀⡼⠁⣼⣿⣿⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣿⣿⡄⢳⡀⠀⠀⠀⠀⠀⢻⡸⣿⣿⣧⠀⠀⠀⣴⣿⣿⡟⡼⠁⠀⠀⠀⠀⠀⠀⠀⡼⢁⣼⣿⣿⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢿⣿⣿⡈⢷⠀⠀⠀⠀⠀⠈⢷⢹⣿⣿⣇⠀⣼⣿⣿⠟⡼⠁⠀⠀⠀⠀⠀⠀⠀⡼⢁⣾⣿⣿⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣷⡘⣇⠀⠀⠀⠀⠀⠈⢧⢿⣿⣿⣼⣿⣿⢏⡾⠁⠀⠀⠀⠀⠀⠀⠀⡼⢡⣿⣿⡿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣷⠸⡆⠀⠀⠀⠀⠀⠘⣯⣿⣿⣿⣿⢏⡞⠁⠀⠀⠀⠀⠀⠀⠀⡼⣱⣿⣿⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣧⢹⡄⠀⠀⠀⠀⠀⠘⢿⣿⣿⢯⡟⠀⠀⠀⠀⠀⠀⠀⢀⡾⣽⣿⣿⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣿⣿⣧⣧⠀⠀⠀⠀⠀⢀⣾⣿⢯⡟⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⢀⣀⠀⠀⣠⣶⣶⣶⣶⣄⠀⠀⠀⠀⠀⠀⠀⠹⣿⣿⣯⠀⠀⠀⠀⢠⣾⣿⢃⡟⠀⠀⠀⠀⠀⠀⠀⠀⣾⣿⣿⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⢠⣶⣿⣿⣿⣿⣾⣿⣿⠟⠻⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠹⣿⣿⣧⠀⠀⢠⣿⡿⢃⡞⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⣿⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⣾⣿⡿⠉⠹⣿⣿⣿⡇⠀⠀⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⣿⣧⣠⣿⡿⣡⣿⣶⣶⣶⣤⠀⠀⠀⢀⣼⣿⣿⠟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⣿⣿⣇⠀⠀⢹⣿⣿⠁⠀⠀⣿⣿⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⣿⣿⣿⡽⣿⣿⡇⠀⢹⣿⡇⠀⢠⣾⣿⣿⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⢻⣿⣿⡄⠀⠀⢿⣿⠀⠀⢠⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⣿⣿⡟⠁⣿⣿⣷⣶⣿⣿⠏⣰⣿⣿⣿⡅⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⣀⣿⣿⣿⡀⠀⠘⣿⡀⣀⣸⣿⣿⡃⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⣿⣿⠏⠀⠀⠈⠻⣿⣿⡿⢡⣾⣿⡿⢿⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⣾⣿⡿⠟⢿⣿⣤⣴⣿⠿⠿⠿⢿⣿⣿⣆⠀⠀⠀⠀⠀⣀⣾⣿⣿⠏⠁⠀⠀⠀⠀⠀⣀⣤⣾⣿⡿⢋⣠⠞⢿⣿⣿⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⣿⣿⠁⠀⠀⢻⣿⠏⠀⠀⠀⠀⠀⢻⣿⣿⡆⠀⠀⣠⣾⣿⣿⣿⣿⣶⣦⣄⣀⣠⣶⣿⣿⣿⣿⣯⡴⠋⠁⣀⣬⣿⣿⣿⣷⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⣿⣿⣇⣀⣠⢸⣿⣦⣀⣠⣤⡄⠀⢸⣿⣿⡇⠀⣰⣿⣿⣿⣭⣥⣬⣽⣻⣿⣿⣿⣿⠟⠋⠙⢿⣿⣿⣴⣿⣿⠿⢛⣛⣿⣿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⢹⣿⣿⣷⣶⣾⣿⠟⢛⡟⠉⠀⣠⣿⣿⣟⣠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠀⠀⠀⠈⣿⣿⣿⣯⣵⣾⣿⣿⣿⣿⣿⣿⣿⣿⣶⣤⣄⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠘⣿⣿⣯⡉⠉⠀⠀⠘⢧⣤⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠃⠀⠀⠀⠀⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣤⣀⠀⠀⠀⠀⠀⠀
⠀⠈⠿⣿⣿⣷⣦⣤⣤⠟⢋⣱⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣄⠀⠀⠀⠀
⠀⠀⠀⠈⣿⣿⣷⣼⣥⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠁⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡻⣿⣿⣷⣄⠀⠀
⠀⠀⠀⠀⠈⠻⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣾⢻⣿⣿⣦⠀
⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠋⠁⠀⠹⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⡟⠁⠀⠀⠀⠈⠻⢿⣿⣿⣿⣿⣿⣷⣿⣿⣿⡆
⠀⠀⠀⠀⠀⣾⣿⣿⣿⣿⣿⣿⣿⣿⡿⠁⠀⠀⠀⠀⠀⢹⣿⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠸⣿⣿⣿⣿⣿⣿⣿⣿⠃⠀⠀⠀⠀⠀⠀⠈⠻⣿⣿⣿⣿⣿⣿⣿⣿⡇
⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⡟⠀⠀⠀⠀⠀⠀⠀⣾⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⣿⣿⣿⣿⣿⣿
⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⠃⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣿⣿⣿⣿⣿⣿⣿⣷⠀⠀⠀⠀⠀⠀⠀⠀⠈⣿⣿⣿⣿⣿⣿⣿⣿
⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⡀⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⣿⣿⣿⣿⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣿⣿⣿⣿⣧⡀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿
⠀⠀⠀⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣇⠀⠀⠀⠀⣠⣾⣿⣿⣿⣿⣿⣿⣿⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿⣿⣿⣷⣄⠀⠀⠀⠀⠀⢠⣿⣿⣿⣿⣿⣿⣿⣿
⠀⠀⠀⠀⠘⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣦⣴⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣦⣤⣤⣴⣿⣿⣿⣿⣿⣿⣿⣿⡏
⠀⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀
⠀⠀⠀⠀⠀⠀⠘⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠙⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠟⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠛⠁⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠛⠛⠿⠿⠿⠟⠛⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠛⠿⠿⣿⣿⣿⡿⠿⠟⠛⠉⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣀⣤⣤⠤⠤⠴⠶⠶⠒⠒⠒⠒⠒⠛⠛⠛⠛⠛⠋⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠛⠛⠛⠛⠓⠒⠒⠒⠒⠶⠶⠦⠤⠤⢤⣄⣀⡀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⢰⡞⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢉⣷⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⣛⡒⠶⠦⠤⣄⣀⣀⣀⣀⣀⣀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣀⣀⣀⣀⣀⣀⣤⡤⣤⢤⡤⠶⠒⠛⠉⠀⠀⠀⠀`,
    },
  ];

  const moves = ["Rock", "Paper", "Scissors"];
  let user = { name: "", art: "", health: 10 };
  let cpu = { name: "", art: "", health: 10 };

  // --- Character Selection ---
  const selectCharacter = () => {
    console.log("Pick your fighter:");
    characters.forEach((c, i) => console.log(`${i + 1}: ${c.name}`));

    rl.question("> ", (choice) => {
      const idx = parseInt(choice) - 1;
      if (!characters[idx]) {
        console.log("Invalid choice, try again.\n");
        return selectCharacter();
      }

      user = { ...characters[idx], health: 10 };
      cpu = {
        ...characters[Math.floor(Math.random() * characters.length)],
        health: 10,
      };
      console.log(`\nYou chose ${user.name}! CPU is ${cpu.name}!\n`);
      renderBattleSideBySide();
      playRound();
    });
  };

  // --- Render Battle with colors ---
  // function renderBattle() {
  //   console.clear();

  //   console.log(chalk.bold(`PLAYER 1: ${user.name}   vs   CPU: ${cpu.name}\n`));

  //   // Player 1 Art + Health
  //   console.log(chalk.blue("PLAYER 1"));
  //   console.log(user.art);
  //   console.log(
  //     `Health: [${chalk.green("█".repeat(user.health))}${chalk.red(
  //       "-".repeat(10 - user.health)
  //     )}]\n`
  //   );

  //   // CPU Art + Health
  //   console.log(chalk.magenta("CPU"));
  //   console.log(cpu.art);
  //   console.log(
  //     `Health: [${chalk.green("█".repeat(cpu.health))}${chalk.red(
  //       "-".repeat(10 - cpu.health)
  //     )}]\n`
  //   );
  // }

  // --- Render Battle Side by Side with colors ---

  const renderBattleSideBySide = () => {
    console.clear();
    console.log(chalk.bold(`PLAYER 1: ${user.name}  vs  CPU: ${cpu.name}\n`));

    const userLines = user.art.split("\n");
    const cpuLines = cpu.art.split("\n");

    const maxLines = Math.max(userLines.length, cpuLines.length);

    for (let i = 0; i < maxLines; i++) {
      const userLine = userLines[i] || "";
      const cpuLine = cpuLines[i] || "";
      const userColored = chalk.blue(userLine); // player in blue
      const cpuColored = chalk.magenta(cpuLine); // CPU in magenta
      console.log(`${userColored.padEnd(100, " ")}${cpuColored}`);
    }

    // Health bars side by side
    const userHealthBar = `${user.name}: [${chalk.green(
      "█".repeat(user.health)
    )}${chalk.red("-".repeat(10 - user.health))}]`;
    const cpuHealthBar = `${cpu.name}: [${chalk.green(
      "█".repeat(cpu.health)
    )}${chalk.red("-".repeat(10 - cpu.health))}]`;

    console.log(`\n${userHealthBar.padEnd(100, " ")}${cpuHealthBar}\n`);
  };

  // --- Attack Animation ---
  const attackFlash = (attacker) => {
    return new Promise((resolve) => {
      process.stdout.write(
        chalk.yellow.bold(`\n${attacker.name} attacks! 💥\n`)
      );
      setTimeout(resolve, 400); // flash for 0.4 sec
    });
  };

  // --- Animate Damage ---
  const dealDamage = (winner, loser, damage) => {
    return new Promise((resolve) => {
      let i = 0;
      const interval = setInterval(() => {
        if (i >= damage) {
          clearInterval(interval);
          resolve();
          return;
        }
        loser.health = Math.max(loser.health - 1, 0);
        renderBattleSideBySide();
        i++;
      }, 200);
    });
  };

  async function playRound() {
    console.log("Choose your move:");
    console.log("1: Rock");
    console.log("2: Paper");
    console.log("3: Scissors");

    rl.question("> ", async (choice) => {
      const idx = parseInt(choice) - 1;
      if (idx < 0 || idx > 2) {
        console.log("Invalid move, try again.\n");
        return playRound();
      }

      const userMove = moves[idx];
      const cpuMove = moves[Math.floor(Math.random() * 3)];

      console.log(`\nPLAYER 1 chose ${userMove}!`);
      console.log(`CPU chose ${cpuMove}!\n`);

      // Determine winner
      let winner = null;
      if (userMove === cpuMove) {
        console.log(chalk.blue("It's a tie!\n"));
        setTimeout(playRound, 800);
        return;
      } else if (
        (userMove === "Rock" && cpuMove === "Scissors") ||
        (userMove === "Paper" && cpuMove === "Rock") ||
        (userMove === "Scissors" && cpuMove === "Paper")
      ) {
        winner = user;
      } else {
        winner = cpu;
      }

      const loser = winner === user ? cpu : user;
      const damage = 1 + Math.floor(Math.random() * 3);

      await attackFlash(winner);
      console.log(
        `${winner === user ? "PLAYER 1" : "CPU"} deals ${damage} damage!\n`
      );

      await dealDamage(winner, loser, damage);

      renderBattleSideBySide(); // show updated health

      // Check for KO
      if (user.health <= 0) {
        console.log(chalk.red.bold("\n💀 CPU Wins! 💀"));
        rl.close();
      } else if (cpu.health <= 0) {
        console.log(chalk.green.bold("\n🏆 PLAYER 1 Wins! 🏆"));
        rl.close();
      } else {
        playRound(); // next round
      }
    });
  }

  // --- Start Game ---
  selectCharacter();
}
